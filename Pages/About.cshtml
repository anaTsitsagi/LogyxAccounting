@page
@using LogyxAccounting.Models

<div class="widget-container">
    <div class="widget-wrapper widget-wrapper-horizontal">
        @(Html.DevExtreme().Tabs()
            .ID("productTabs")
            .Width("auto")
            .SelectedIndex(0)
            .DataSource(new JS("tabsText"))
            .StylingMode(TabsStyle.Primary)
            )
    </div>

    @(Html.DevExtreme().DataGrid<SampleOrder>()
        .ElementAttr(new { @class = "dx-card wide-card" })
        .DataSource(d => d.Mvc().Controller("SampleData").LoadAction("Get").Key("Id"))
        .ShowBorders(false)
        .FilterRow(f => f.Visible(true))
        .FocusedRowEnabled(true)
        .FocusedRowIndex(0)
        .ColumnAutoWidth(true)
        .Columns(columns =>
        {
            columns.AddFor(m => m.Name);
            columns.AddFor(m => m.ProductGroup);
            columns.AddFor(m => m.MeasuringUnit);
            columns.AddFor(m => m.ProductCode);
            columns.AddFor(m => m.BarCode);
            columns.AddFor(m => m.Price);
            columns.AddFor(m => m.Quantity);    
            columns.AddFor(m => m.TypeOfTaxation);
            columns.AddFor(m => m.Price);
            columns.AddFor(m => m.Discount);
        })
        .Paging(p => p.PageSize(10))
        .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 5, 10, 20 })
        .ShowInfo(true)
        )
        )
</div>

<script>
    function orientation_valueChanged(e) {
        const $widgetWrapper = $(".widget-wrapper");

        const isVertical = e.value === "vertical";

        $widgetWrapper.toggleClass("widget-wrapper-vertical", isVertical);
        $widgetWrapper.toggleClass("widget-wrapper-horizontal", !isVertical);

        setTabsOption("orientation", e.value);
    }

    function stylingMode_valueChanged(e) {
        setTabsOption("stylingMode", e.value);
    }

    function iconPosition_valueChanged(e) {
        setTabsOption("iconPosition", e.value);
    }

    function showNavigation_valueChanged(e) {
        const scrollContentCheckBox = $("#scroll-content").dxCheckBox("instance");
        const shouldRestrictWidth = data.value || scrollContentCheckBox.option("value");

        toggleStrictWidthClass(shouldRestrictWidth);

        setTabsOption("showNavButtons", e.value);
    }

    function scrollContent_valueChanged(e) {
        const showNavButtonsCheckBox = $("#show-navigation-buttons").dxCheckBox("instance");
        const shouldRestrictWidth = data.value || showNavButtonsCheckBox.option("value");

        toggleStrictWidthClass(shouldRestrictWidth);

        setTabsOption("scrollByContent", e.value);
    }

    function fullWidth_valueChanged(e) {
        setTabsOption("width", e.value ? "100%" : "auto");
    }

    function rtlEnabled_valueChanged(e) {
        setTabsOption("rtlEnabled", e.value);
    }

    function setTabsOption(option, value) {
        $("#withText").dxTabs("instance").option(option, value);
        $("#withIconAndText").dxTabs("instance").option(option, value);
        $("#withIcon").dxTabs("instance").option(option, value);
    }

    function toggleStrictWidthClass(shouldRestrictWidth) {
        const $widgetWrapper = $(".widget-wrapper");

        $widgetWrapper.toggleClass("strict-width", isHorizontal && shouldRestrictWidth);
    }

    const tabsText = [
        {
            id: 0,
            text: "პროდუქტები",
        },
        {
            id: 1,
            text: "ძირითადი საშუალებები",
        },
        {
            id: 2,
            text: "მყიდველები",
        },
        {
            id: 3,
            text: "მომწოდებლები",
        },
        {
            id: 4,
            text: "თანამშრომლები",
        }
    ];

  

</script>
