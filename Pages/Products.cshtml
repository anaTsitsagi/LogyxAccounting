@page
@using LogyxAccounting.Models
@using LogyxAccounting.Models.Repository

<div class="widget-container">

    @* Reusable top menu inside page content *@
    @await Component.InvokeAsync("DirectoriesMenu", new { activeKey = "products" })

    @(
        Html.DevExtreme().DataGrid<ProductsRepository>()
            .ID("productsGrid")
            .ElementAttr(new { @class = "dx-card wide-card custom-grid grid-card" })

            // Data
            .DataSource(d => d.Mvc()
            .Controller("Products")
            .LoadAction("Get")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("id")
            )

            // Look & feel
            .ShowBorders(false)
            .RowAlternationEnabled(true)
            .HoverStateEnabled(true)
            .ColumnAutoWidth(true)
            .AllowColumnReordering(true)
            .AllowColumnResizing(true)
            .ColumnResizingMode(ColumnResizingMode.NextColumn)
            .WordWrapEnabled(true)

            // Find & filter
            .SearchPanel(s => s.Visible(true).Placeholder("ძებნა..."))
            .FilterRow(f => f.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
            .HeaderFilter(h => h.Visible(true))

            //editing
            .Editing(e => e
            .Mode(GridEditMode.Form)
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)
            .UseIcons(true)
            .Form(f => f
            .ColCount(2)
            .LabelLocation(FormLabelLocation.Top)
            .Items(items =>
            {

            items.AddSimpleFor(m => m.name)
            .IsRequired(true)
            .ValidationRules(v => v.AddRequired().Message("აუცილებელია!"));

            items.AddSimpleFor(m => m.code);

            items.AddSimpleFor(m => m.barcode);

            items.AddSimpleFor(m => m.price)
            .Editor(ed => ed.NumberBox()
            .ShowSpinButtons(true)
            .Min(0)
            .Format(fm => fm.Type(Format.FixedPoint).Precision(2)));

            // DB stores 20 for 20% → keep 0..100 editor
            items.AddSimpleFor(m => m.sale_percent);

            items.AddSimpleFor(m => m.taxation_type_id)
            .Label(l => l.Text("გადასახადის ტიპი"))
            .Editor(ed => ed.SelectBox()
            .SearchEnabled(true)
            .DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("TaxationTypes")
            .Key("id"))
            .ValueExpr("id").DisplayExpr("name"));

            items.AddSimpleFor(m => m.type_id)
            .Label(l => l.Text("პროდუქტის ტიპი"))
            .Editor(ed => ed.SelectBox()
            .SearchEnabled(true)
            .DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("ProductTypes")
             .Key("id"))
            .ValueExpr("id").DisplayExpr("name"));

            items.AddSimpleFor(m => m.measure_unit_id)
            .Label(l => l.Text("ერთეული"))
            .Editor(ed => ed.SelectBox()
            .SearchEnabled(true)
            .DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("MeasureUnits")
            .Key("id"))
            .ValueExpr("id").DisplayExpr("name"));

            items.AddSimpleFor(m => m.category_id)
            .Label(l => l.Text("ჯგუფი"))
            .Editor(ed => ed.SelectBox()
            .SearchEnabled(true)
            .DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("ProductCategories")
            .Key("id"))
            .ValueExpr("id").DisplayExpr("type"));

            items.AddSimpleFor(m => m.inventory_account_id)
            .Label(l => l.Text("მარაგების აღრიცხვის ანგარიში"))
            .Editor(ed => ed.SelectBox()
            .SearchEnabled(true)
            .DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("InventoryAccounts")
            .Key("id"))
            .ValueExpr("id")
            .DisplayExpr(new JS("item => item ? `${item.code} — ${item.name}` : ''"))
            .SearchExpr(new[] { "code", "name" }));

            items.AddSimpleFor(m => m.income_account_id)
            .Label(l => l.Text("შემოსავლების აღრიცხვის ანგარიში"))
            .Editor(ed => ed.SelectBox()
            .SearchEnabled(true)
            .DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("IncomeAccounts")
            .Key("id"))
            .ValueExpr("id")
            .DisplayExpr(new JS("item => item ? `${item.code} — ${item.name}` : ''"))
            .SearchExpr(new[] { "code", "name" }));

            items.AddSimpleFor(m => m.expenses_account_id)
            .Label(l => l.Text("ხარჯების აღრიცხვის ანგარიში"))
            .Editor(ed => ed.SelectBox()
            .SearchEnabled(true)
            .DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("ExpensesAccounts")
            .Key("id"))
            .ValueExpr("id")
            .DisplayExpr(new JS("item => item ? `${item.code} — ${item.name}` : ''"))
            .SearchExpr(new[] { "code", "name" }));

            items.AddSimpleFor(m => m.accrued_taxes_account_id)
            .Label(l => l.Text("დღგ-ის ანგარიში"))
            .Editor(ed => ed.SelectBox()
            .SearchEnabled(true)
            .DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("AccruedTaxesAccounts")
            .Key("id"))
            .ValueExpr("id")
            .DisplayExpr(new JS("item => item ? `${item.code} — ${item.name}` : ''"))
            .SearchExpr(new[] { "code", "name" }));

            items.AddSimpleFor(m => m.comment);

        })
        )
        )

        // Columns
        .Columns(columns =>
        {
            columns.AddFor(m => m.name)
            .Caption("დასახელება")
            .ValidationRules(v => v.AddRequired().Message("საჭიროა დასახელება"));

            columns.AddFor(m => m.code)
            .Caption("კოდი")
            .Width(100);

            columns.AddFor(m => m.barcode)
            .Caption("შტრიხკოდი")
            .Width(100);

            columns.AddFor(m => m.price)
            .Caption("ფასი")
            .DataType(GridColumnDataType.Number)
            .Format(f => f.Type(Format.FixedPoint).Precision(2))
            .EditorOptions(new { min = 0 })
            .Width(100);

            columns.AddFor(m => m.sale_percent)
            .Caption("ფასდაკლება")
            .DataType(GridColumnDataType.Number)
            .CustomizeText("function(e){ return (e.value ?? 0) + '%'; }")
            .Width(100);

            columns.AddFor(m => m.taxation_type_id)
            .Caption("გადასახადის ტიპი")
            .ShowInColumnChooser(true)
            .Lookup(l => l.DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("TaxationTypes"))
            .ValueExpr("id")
            .DisplayExpr("name"));

            columns.AddFor(m => m.type_id)
            .Caption("პროდუქტის ტიპი")
            .Visible(false)
            .ShowInColumnChooser(true)
            .Lookup(l => l.DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("ProductTypes"))
            .ValueExpr("id")
            .DisplayExpr("name"));

            columns.AddFor(m => m.measure_unit_id)
            .Caption("ერთეული")
            .ShowInColumnChooser(true)
            .Lookup(l => l.DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("MeasureUnits"))
            .ValueExpr("id")
            .DisplayExpr("name"));

            columns.AddFor(m => m.category_id)
            .Caption("ჯგუფი")
            .ShowInColumnChooser(true)
            .Lookup(l => l.DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("ProductCategories"))
            .ValueExpr("id")
            .DisplayExpr("type"));


            columns.AddFor(m => m.inventory_account_id)
            .Caption("მარაგების აღრიცხვის ანგარიში")
            .ShowInColumnChooser(true)
            .Visible(false)
            .Lookup(l => l.DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("InventoryAccounts"))
            .ValueExpr("id")
            .DisplayExpr(new JS("item => item ? `${item.code} — ${item.name}` : ''")));


            columns.AddFor(m => m.income_account_id)
            .Caption("შემოსავლების აღრიცხვის ანგარიში")
            .ShowInColumnChooser(true)
            .Visible(false)
            .Lookup(l => l.DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("IncomeAccounts"))
            .ValueExpr("id")
            .DisplayExpr(new JS("item => item ? `${item.code} — ${item.name}` : ''")));


            columns.AddFor(m => m.expenses_account_id)
            .Caption("ხარჯების აღრიცხვის ანგარიში")
            .ShowInColumnChooser(true)
            .Visible(false)
            .Lookup(l => l.DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("ExpensesAccounts"))
            .ValueExpr("id")
            .DisplayExpr(new JS("item => item ? `${item.code} — ${item.name}` : ''")));


            columns.AddFor(m => m.accrued_taxes_account_id)
            .Caption("დღგ-ის ანგარიში")
            .ShowInColumnChooser(true)
            .Visible(false)
            .Lookup(l => l.DataSource(ds => ds.Mvc()
            .Controller("Products")
            .LoadAction("AccruedTaxesAccounts"))
            .ValueExpr("id")
            .DisplayExpr(new JS("item => item ? `${item.code} — ${item.name}` : ''")));

            columns.AddFor(m => m.comment)
            .Caption("კომენტარი")
            .Visible(false)
            .DataType(GridColumnDataType.String);

        })

        // Sorting/selection
        .Sorting(s => s.Mode(GridSortingMode.Multiple))
        .Selection(sel => sel.Mode(SelectionMode.Single))

        // Column chooser
        .ColumnChooser(cc => cc.Enabled(true).Mode(GridColumnChooserMode.Select))

        // Paging
        .Paging(p => p.PageSize(10))
        .Pager(p => p
        .ShowPageSizeSelector(true)
        .AllowedPageSizes(new[] { 10, 20, 50 })
        .ShowInfo(true))

        // Remember user layout (order/widths etc.)
        .StateStoring(ss => ss.Enabled(true)
        .Type(StateStoringType.LocalStorage)
        .StorageKey("productsGridState"))

        // Custom toolbar buttons
        .OnToolbarPreparing("products_onToolbarPreparing")
        //on new row
        .OnInitNewRow("products_onInitNewRow")
        )


    @(Html.DevExtreme().FileUploader()
        .ID("excelUploader")
        .SelectButtonText("Excel იმპორტი")
        .LabelText("")
        .Multiple(false)
        .Accept(".xlsx,.xls,.csv")
        .UploadMode(FileUploadMode.Instantly)
        .UploadUrl(Url.Action("UploadExcel", "Products"))
        .OnUploaded("() => $('#productsGrid').dxDataGrid('instance').refresh()")
        )
</div>


    <script>
        function products_onToolbarPreparing(e) {
            const grid = e.component;


            // Right side: Refresh

            e.toolbarOptions.items.push({
                location: "after",
                widget: "dxButton",
                options: { icon: "refresh", hint: "განახლება", onClick: () => grid.refresh() }
            });

            // Right side: Reset layout (clears state storing)
            e.toolbarOptions.items.push({
                location: "after",
                widget: "dxButton",
                options: {
                    icon: "revert",
                    hint: "გადაყენება (განლაგება)",
                    onClick: () => {
                        try { localStorage.removeItem("productsGridState"); } catch (e) { }
                        grid.state(null);
                        grid.refresh();
                    }
                }
            });
        }
    function products_onInitNewRow(e) {
        // set whatever defaults you want
        e.data = e.data || {};
        e.data.price = 0;
        e.data.sale_percent = 0;
        // Lookups: set IDs that actually exist in the lookup data
        e.data.taxation_type_id = 1;      // e.g., "VAT" id
        e.data.type_id = 1;      // e.g., "Standard" id
        e.data.category_id = null; 
        e.data.inventory_account_id = 1610;// or a default category id
    }
    </script>

