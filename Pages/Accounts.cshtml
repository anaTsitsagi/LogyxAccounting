@page "/Accounts"
@using DevExtreme.AspNet.Mvc
@using LogyxAccounting.Models.Repository

@await Component.InvokeAsync("DirectoriesMenu", new { activeKey = "accounts" })

@(Html.DevExtreme().TreeList<AccountsRepository>()                // your DTO/entity
    .ID("accountsTree")
    .ElementAttr("class", "tree-indent-lg")
    .DataSource(ds => ds.Mvc()
        .Controller("Accounts")                           // -> AccountsController below
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("code")                                      // unique key
    )
    .KeyExpr("code")                                      // key field
    .ParentIdExpr("parent_code")                          // parent pointer
    .DataStructure(TreeListDataStructure.Plain)           // flat data with parent ids
    .RootValue(0)

    .AutoExpandAll(false)
    .ColumnAutoWidth(true)
    .WordWrapEnabled(true)
    .ShowBorders(false)
    .FocusedRowEnabled(true)

    /* Search & filtering */
    .SearchPanel(s => s.Visible(true).Placeholder("ძიება..."))
    .FilterRow(f => f.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
    .HeaderFilter(h => h.Visible(false))

    /* Editing (Form mode; Row mode also works) */
    .Editing(e => e
        .Mode(GridEditMode.Form)                      // or TreeListEditMode.Row
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Form(f => f.ColCountByScreen(c => c.Lg(3).Md(2).Sm(1))
            .Items(items =>
            {
                items.AddSimpleFor(m => m.code)
                     .IsRequired(true)
                     .ValidationRules(v => v.AddRequired());

                items.AddSimpleFor(m => m.name)
                     .IsRequired(true)
                     .ValidationRules(v => v.AddRequired());

                // let users change parent (optional)
                items.AddSimpleFor(m => m.parent_code)
                     .Label(l => l.Text("Parent code"));
            })
        )
    )

    .Columns(c =>
    {
        c.AddFor(m => m.code).Caption("Code").Width(120);
        c.AddFor(m => m.name).Caption("Name");
        c.AddFor(m => m.parent_code).Caption("Parent code").Visible(true); // hide if you prefer
        
    })

    // Nice: prefill parent_code when user adds under a focused node
    .OnInitNewRow("acct_onInitNewRow")
)

    <script>
        function acct_onInitNewRow(e) {
            const tree = $("#accountsTree").dxTreeList("instance");
            const parentKey = tree.option("focusedRowKey");   // null when adding at root
            if (parentKey != null) e.data.parent_code = parentKey;
        }
    </script>

